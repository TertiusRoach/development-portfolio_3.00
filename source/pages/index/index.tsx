import './index.scss';
import React from 'react';
import Main from './main/Main';
import Header from './header/Header';
import Footer from './footer/Footer';
import Leftbar from './leftbar/Leftbar';
import Overlay from './overlay/Overlay';
import Rightbar from './rightbar/Rightbar';
import { createRoot } from 'react-dom/client';

const page: string = 'index'; //--|ğŸ ˆ This represents the page being viewed ğŸ ˆ|--//
const label: string = 'default'; //--|ğŸ ˆ This represents the design that will be selected ğŸ ˆ|--//
interface BodyProps {
  //--|ğŸ ‰ An interface is like a recipe that tells your code what ingredients (props) a component needs. ğŸ ˆ|--//
  page: string;
  label: string | 'default';
}
const Body: React.FC<BodyProps> = ({ page, label }) => {
  //--|ğŸ ‰ React.FC tells your code that this is a React function component. ğŸ ‰|--//
  //--|ğŸ Š This component needs info about the page and label to work. ğŸ ˆ|--//
  //--|ğŸ ‹ <BodyProps> defines the information this component needs to work. ğŸ ‹|--//
  return (
    <>
      <Overlay page={page} label={label} />
      <Header page={page} label={label} />
      <Footer page={page} label={label} />
      <Leftbar page={page} label={label} />
      <Rightbar page={page} label={label} />
      <Main page={page} label={label} />
    </>
  );
  console.log(`//--|ğŸ Š ${page}.tsx Loaded ğŸ ˆ|--//`);
};

const container: HTMLDivElement | null = document.querySelector(`#${page}-body`); //--|ğŸ ˆ Check for the required container element in the DOM ğŸ ˆ|--//
if (container) {
  createRoot(container).render(<Body page={page} label={label} />);
  //--|ğŸ Š If the container element exists then render the <Body> component. ğŸ ˆ|--//
} else {
  let message: string = `//--|ğŸ Š Add an element inside the <body> tag with an id='${page}-body' ğŸ ˆ|--//`;
  alert(message);
  throw new Error(message);
}
export default Body;
